doctype html
html
  head
    title Show Matches
    // Include any CSS files or styles here
    link(rel='stylesheet', href='../static/style/bootstrap.min.css')
    link(rel='stylesheet', href='../static/style/style.css')
  body
    .container-fluid
      h1.my-4 Matches          
    script(src="../static/js/bootstrap.bundle.min.js")
    script.
      document.addEventListener('DOMContentLoaded', () => {
        fetch('/matchdata')
          .then(response => {
            if (!response.ok) {
              throw new Error('Network response was not ok');
            }
            return response.json();
          })
          .then(data => {
            const container = document.querySelector('.container-fluid');
            data.forEach((match, index) => {
              const matchContainer = document.createElement('div');
              matchContainer.innerHTML = `
                <h2>${match.team1.name} vs ${match.team2.name}</h2>
                <table class="table table-striped table-hover" >
                  <thead>
                    <tr>
                      <th>Team</th>
                      <th>Score</th>
                      <th>Wickets</th>
                      <th>Winner</th>
                    </tr>
                  </thead>
                  <tbody>
                    <tr>
                      <td>${match.team1.name}</td>
                      <td>${match.team1.score}</td>
                      <td>${match.team1.wickets}</td>
                      <td>${match.winner}</td>
                    </tr>
                    <tr>
                      <td>${match.team2.name}</td>
                      <td>${match.team2.score}</td>
                      <td>${match.team2.wickets}</td>
                      <td>${match.winner}</td>
                    </tr>
                  </tbody>
                </table>
                <h3>1st Inning</h3>
                <table class="table table-striped table-hover" >
                  <thead>
                    <tr>
                      <th>Name</th>
                      <th>Runs</th>
                      <th>Balls</th>
                      <th>Fours</th>
                      <th>Sixes</th>
                    </tr>
                  </thead>
                  <tbody>
                    ${Object.keys(match.team1.players).map(player => `
                      <tr>
                        <td>${player}</td>
                        <td>${match.team1.players[player][0]}</td>
                        <td>${match.team1.players[player][1]}</td>
                        <td>${match.team1.players[player][2]}</td>
                        <td>${match.team1.players[player][3]}</td>
                      </tr>
                    `).join('')}
                  </tbody>
                </table>
                <table class="table table-striped table-hover">
                  <thead>
                    <tr>
                      <th>Name</th>
                      <th>Overs</th>
                      <th>Runs Conceded</th>
                      <th>Wickets</th>
                      <th>Economy</th>
                      <th>Extra Runs</th>
                    </tr>
                  </thead>
                  <tbody>
                    ${Object.keys(match.team1.bowlersStats).map(bowler => {
                      const stats = match.team1.bowlersStats[bowler];
                      var y = ((stats[stats.length - 1]).length);
                      var overs;
                      if(y >= 6){
                        overs = Math.floor(stats.length) + '.0';
                      }
                      else{
                        overs = Math.floor(stats.length-1) + '.' + y;
                      }
                      let extraRuns = 0;
                      const runsConceded = stats.flat().reduce((total, delivery) => {
                        if (typeof delivery === 'number') {
                          return total + delivery;
                        } else if (typeof delivery === 'string') {
                          const match = delivery.match(/(\d+)\+(WB|NB)/);
                          if (match) {
                            total += parseInt(match[1], 10);
                            extraRuns += 1;
                          }
                        }
                        return total;
                      }, 0);
                      const wickets = stats.filter(stat => stat === 'W').length;
                      const parts = overs.split('.');
                      const completeOvers = parseInt(parts[0], 10);
                      const additionalBalls = parts.length > 1 ? parseInt(parts[1], 10) / 6 : 0;
                      const totalOvers = completeOvers + additionalBalls;
                      const economy = totalOvers > 0 ? (runsConceded / totalOvers).toFixed(2) : '0.00';
                      return `
                        <tr>
                          <td>${bowler}</td>
                          <td>${overs}</td>
                          <td>${runsConceded}</td>
                          <td>${wickets}</td>
                          <td>${economy}</td>
                          <td>${extraRuns}</td> 
                        </tr>
                      `;
                    }).join('')}
                  </tbody>
                </table>
                <h3>2nd Inning</h3>
                <table class="table table-striped table-hover">
                  <thead>
                    <tr>
                      <th>Name</th>
                      <th>Runs</th>
                      <th>Balls</th>
                      <th>Fours</th>
                      <th>Sixes</th>
                    </tr>
                  </thead>
                  <tbody>
                    ${Object.keys(match.team2.players).map(player => `
                      <tr>
                        <td>${player}</td>
                        <td>${match.team2.players[player][0]}</td>
                        <td>${match.team2.players[player][1]}</td>
                        <td>${match.team2.players[player][2]}</td>
                        <td>${match.team2.players[player][3]}</td>
                      </tr>
                    `).join('')}
                  </tbody>
                </table>
                <table class="table table-striped table-hover">
                  <thead>
                    <tr>
                      <th>Name</th>
                      <th>Overs</th>
                      <th>Runs Conceded</th>
                      <th>Wickets</th>
                      <th>Economy</th>
                      <th>Extra Runs</th>
                    </tr>
                  </thead>
                  <tbody>
                    ${Object.keys(match.team2.bowlersStats).map(bowler => {
                      const stats = match.team2.bowlersStats[bowler];
                      var y = ((stats[stats.length - 1]).length);
                      var overs;
                      if(y >= 6){
                        overs = Math.floor(stats.length) + '.0';
                      }
                      else{
                        overs = Math.floor(stats.length-1) + '.' + y;
                      }
                      let extraRuns = 0; // Counter for extra runs (wides and no-balls)
                      const runsConceded = stats.flat().reduce((total, delivery) => {
                        if (typeof delivery === 'number') {
                          return total + delivery;
                        } else if (typeof delivery === 'string') {
                          const match = delivery.match(/(\d+)\+(WB|NB)/);
                          if (match) {
                            total += parseInt(match[1], 10);
                            // Count each wide or no-ball as an extra run
                            extraRuns += 1;
                          }
                        }
                        return total;
                      }, 0);
                      const wickets = stats.filter(stat => stat === 'W').length;
                      const parts = overs.split('.');
                      const completeOvers = parseInt(parts[0], 10);
                      const additionalBalls = parts.length > 1 ? parseInt(parts[1], 10) / 6 : 0;
                      const totalOvers = completeOvers + additionalBalls;
                      const economy = totalOvers > 0 ? (runsConceded / totalOvers).toFixed(2) : '0.00';
                      return `
                        <tr>
                          <td>${bowler}</td>
                          <td>${overs}</td>
                          <td>${runsConceded}</td>
                          <td>${wickets}</td>
                          <td>${economy}</td>
                          <td>${extraRuns}</td> 
                        </tr>
                      `;
                    }).join('')}
                  </tbody>
                </table>
                <hr>
                <hr>
              `;
              container.appendChild(matchContainer);
            });
          })
          .catch(error => console.error('Error loading match data:', error));
      });
